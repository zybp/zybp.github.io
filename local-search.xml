<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>http协议详解</title>
    <link href="/2024/03/20/http/"/>
    <url>/2024/03/20/http/</url>
    
    <content type="html"><![CDATA[<blockquote><p>书接上文<a href="https://zybp.github.io/2024/03/19/esp32http/">esp32通过wifi进行http请求获得天气信息</a><br>本文为http协议详解 并通过套接字（socket）方法进行httpGET请求</p></blockquote><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HTTP:<code>HTTP</code>协议(超文本传输协议HyperText Transfer Protocol)，它是基于TCP协议的应用层传输协议，简单来说就是客户端和服务端进行数据传输的一种规则。为典型的CS应用,HTTP 是一种无状态 (stateless) 协议, HTTP协议本身不会对发送过的请求和相应的通信状态进行持久化处理。这样做的目的是为了保持HTTP协议的简单性，从而能够快速处理大量的事务, 提高效率。</p><blockquote><p>注意：客户端与服务器的角色不是固定的，一端充当客户端，也可能在某次请求中充当服务器。这取决与请求的发起端。HTTP协议属于应用层，建立在传输层协议TCP之上。客户端通过与服务器建立TCP连接，之后发送HTTP请求与接收HTTP响应都是通过访问Socket接口来调用TCP协议实现。</p></blockquote><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="HTTP-URL"><a href="#HTTP-URL" class="headerlink" title="HTTP URL"></a>HTTP URL</h2><p>HTTP URL 包含了用于查找某个资源的详细信息, 格式如下:<br>    <a href="http://host[":"port][abs_path]">http://host[&quot;:&quot;port][abs_path]</a></p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p><img src="/../log/http/1.jpg"><br>由上图可以看到，http请求由请求行，消息报头，请求正文三部分构成。</p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>最上面一行为请求行。<br>请求行由请求Method, URL 字段和HTTP Version三部分构成, 总的来说请求行就是定义了本次请求的请求方式, 请求的地址, 以及所遵循的HTTP协议版本例如：<br>    GET &#x2F;example.html HTTP&#x2F;1.1 (CRLF)</p><blockquote><p>HTTP协议的方法有： GET： 请求获取Request-URI所标识的资源 POST： 在Request-URI所标识的资源后增加新的数据 HEAD： 请求获取由Request-URI所标识的资源的响应消息报头 PUT： 请求服务器存储或修改一个资源，并用Request-URI作为其标识 DELETE： 请求服务器删除Request-URI所标识的资源 TRACE： 请求服务器回送收到的请求信息，主要用于测试或诊断 CONNECT： 保留将来使用 OPTIONS： 请求查询服务器的性能，或者查询与资源相关的选项和需求</p></blockquote><p><strong>其中example.html为路径部分，不是完整的URL（被这点小问题折磨一天）</strong></p><h3 id="HTTP请求报头"><a href="#HTTP请求报头" class="headerlink" title="HTTP请求报头"></a>HTTP请求报头</h3><p>消息报头由一系列的键值对组成，允许客户端向服务器端发送一些附加信息或者客户端自身的信息，主要包括：<br><img src="/../log/http/2.jpg"></p><h3 id="HTTP请求正文"><a href="#HTTP请求正文" class="headerlink" title="HTTP请求正文"></a>HTTP请求正文</h3><p>只有在发送POST请求时才会有请求正文，当请求方法为GET时，请求正文省略。</p><h3 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs swift"><span class="hljs-keyword">static</span> const char <span class="hljs-operator">*</span><span class="hljs-type">REQUEST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;GET /simpleWeather/query?city=郑州&amp;key=9bcb73de14725f3cdb5801159d461863 HTTP/1.1<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span><br>                             <span class="hljs-string">&quot;Host: apis.juhe.cn<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span><br>                             <span class="hljs-string">&quot;Connection: close<span class="hljs-subst">\r</span><span class="hljs-subst">\n</span><span class="hljs-subst">\r</span><span class="hljs-subst">\n</span>&quot;</span>;<br><br></code></pre></td></tr></table></figure><h2 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p>也先上图<img src="/../log/http/3.jpg"></p><h3 id="HTTP响应状态行"><a href="#HTTP响应状态行" class="headerlink" title="HTTP响应状态行"></a>HTTP响应状态行</h3><p>状态行也由三部分组成，包括HTTP协议的版本，状态码，以及对状态码的文本描述。例如：<br>    HTTP&#x2F;1.1 200 OK （CRLF）</p><h3 id="HTTP响应状态码"><a href="#HTTP响应状态码" class="headerlink" title="HTTP响应状态码"></a>HTTP响应状态码</h3><p>状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：</p><ol><li><code>1xx</code>：指示信息 - 表示请求已接收，继续处理 </li><li><code>2xx</code>：成功 - 表示请求已被成功接收、理解、接受</li><li><code>3xx</code>：重定向 - 要完成请求必须进行更进一步的操作 </li><li><code>4xx</code>：客户端错误 - 请求有语法错误或请求无法实现 </li><li><code>5xx</code>服务器端错误 - 服务器未能实现合法的请求<blockquote><p>常见状态代码、状态描述、说明： 200： OK - 客户端请求成功 400： Bad Request - 客户端请求有语法错误，不能被服务器所理解 401： Unauthorized - 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 403： Forbidden - 服务器收到请求，但是拒绝提供服务 404： Not Found - 请求资源不存在，eg：输入了错误的URL 500： Internal Server Error - 服务器发生不可预期的错误 * 503： Server Unavailable - 服务器当前不能处理客户端的请求，一段时间后,可能恢复正常<br><img src="/../log/http/4.jpg" alt="HTTP响应状态码" title="HTTP响应状态码"></p></blockquote></li></ol><h3 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h3><p><img src="/../log/http/5.jpg" alt="1" title="5"></p><h1 id="实现HTTP请求的方法步骤-以esp32为例"><a href="#实现HTTP请求的方法步骤-以esp32为例" class="headerlink" title="实现HTTP请求的方法步骤(以esp32为例)"></a>实现HTTP请求的方法步骤(以esp32为例)</h1><h2 id="方法-来自ChatGPT"><a href="#方法-来自ChatGPT" class="headerlink" title="方法 来自ChatGPT"></a>方法 <em>来自ChatGPT</em></h2><ol><li>使用HTTP库：许多编程语言和平台都提供了用于HTTP请求的内置或第三方库。这些库通常封装了Socket API，并提供了更高级的接口来方便地执行HTTP请求和处理响应。例如，在C语言中，你可以使用libcurl、libhttp、libmicrohttpd等库来执行HTTP请求。</li><li>使用HTTP客户端库：许多编程语言和平台都提供了专门用于执行HTTP请求的HTTP客户端库。这些库通常提供了更高级的API，用于构建和发送HTTP请求，并处理响应。例如，Python中的Requests库、JavaScript中的Axios库等。</li><li>使用网络框架：许多网络框架和服务器框架提供了HTTP客户端功能，可以用于执行HTTP请求。这些框架通常提供了简单易用的API，用于发送HTTP请求和处理响应。例如，Node.js中的Express框架、Java中的Spring框架等。</li><li>使用系统级API：某些操作系统提供了系统级的API来执行HTTP请求。这些API通常是在操作系统网络栈的底层实现，因此可以直接与网络通信进行交互。例如，Windows平台提供了WinINet API、Linux平台提供了cURL库等。</li><li>最接近底层的实现是使用Socket API。尽管其他方法提供了更高级的抽象和易用性，但它们最终都会使用Socket API或类似的底层网络接口来进行实际的网络通信。</li></ol><p><strong>本次来讲socket方法进行http请求</strong></p><h2 id="socket请求步骤-来自ChatGPT"><a href="#socket请求步骤-来自ChatGPT" class="headerlink" title="socket请求步骤 来自ChatGPT"></a>socket请求步骤 <em>来自ChatGPT</em></h2><ol><li>创建Socket连接：首先，你需要创建一个Socket连接到服务器。使用 socket() 函数来创建一个Socket描述符。</li><li>解析主机名：如果你使用主机名来连接服务器，你需要将主机名解析为IP地址。可以使用 getaddrinfo() 函数来实现。它会将主机名解析为一个或多个地址结构。</li><li>连接服务器：使用 connect() 函数将Socket连接到服务器。需要提供服务器的IP地址和端口号。</li><li>构建HTTP请求：构建符合HTTP协议规范的请求。通常，这包括构建请求行、请求头和请求体。请求行包括请求方法（如GET、POST）、请求的URI和HTTP版本。请求头包括一些关于请求的元信息，如Host、Content-Type等。请求体包括发送给服务器的数据（如果有的话）。</li><li>发送HTTP请求：使用 send() 函数发送构建好的HTTP请求到服务器。</li><li>接收HTTP响应：使用 recv() 函数从服务器接收HTTP响应。你可以一次性接收全部响应，也可以分块接收。</li><li>解析HTTP响应：解析接收到的HTTP响应，包括状态行、响应头和响应体。状态行包括HTTP版本、状态码和状态消息。响应头包括服务器的一些元信息，如Content-Type、Content-Length等。响应体包括服务器返回的实际数据。</li><li>关闭Socket连接：当你完成HTTP请求和响应后，使用 close() 函数关闭Socket连接。</li></ol><p>贴个代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">https_get_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">addrinfo</span> hints = &#123;<br>        .ai_family = AF_INET,<br>        .ai_socktype = SOCK_STREAM,<br>    &#125;;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">addrinfo</span> *res;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">in_addr</span> *addr;<br>    <span class="hljs-type">int</span> s, r;<br>    <span class="hljs-type">char</span> recv_buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">char</span> mid_buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> index;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">//DNS域名解析</span><br>        <span class="hljs-type">int</span> err = <span class="hljs-built_in">getaddrinfo</span>(WEB_SERVER, WEB_PORT, &amp;hints, &amp;res);<br>        <span class="hljs-keyword">if</span>(err != <span class="hljs-number">0</span> || res == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;DNS lookup failed err=%d res=%p\r\n&quot;</span>, err, res);<br>            <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//打印获取的IP</span><br>        addr = &amp;((<span class="hljs-keyword">struct</span> sockaddr_in *)res-&gt;ai_addr)-&gt;sin_addr;<br>        <span class="hljs-comment">//ESP_LOGI(HTTP_TAG, &quot;DNS lookup succeeded. IP=%s\r\n&quot;, inet_ntoa(*addr));</span><br><br>        <span class="hljs-comment">//新建socket</span><br>        s = <span class="hljs-built_in">socket</span>(res-&gt;ai_family, res-&gt;ai_socktype, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(s &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;... Failed to allocate socket.\r\n&quot;</span>);<br>            <span class="hljs-built_in">close</span>(s);<br>            <span class="hljs-built_in">freeaddrinfo</span>(res);<br>            <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//连接ip</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">connect</span>(s, res-&gt;ai_addr, res-&gt;ai_addrlen) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;... socket connect failed errno=%d\r\n&quot;</span>, errno);<br>            <span class="hljs-built_in">close</span>(s);<br>            <span class="hljs-built_in">freeaddrinfo</span>(res);<br>            <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">4000</span> / portTICK_PERIOD_MS);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">freeaddrinfo</span>(res);<br>        <span class="hljs-comment">//发送http包</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">write</span>(s, REQUEST, <span class="hljs-built_in">strlen</span>(REQUEST)) &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;... socket send failed\r\n&quot;</span>);<br>            <span class="hljs-built_in">close</span>(s);<br>            <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">4000</span> / portTICK_PERIOD_MS);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-comment">//清缓存</span><br>        <span class="hljs-built_in">memset</span>(mid_buf,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(mid_buf));<br>        <span class="hljs-comment">//获取http应答包</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-built_in">bzero</span>(recv_buf, <span class="hljs-built_in">sizeof</span>(recv_buf));<br>            r = <span class="hljs-built_in">read</span>(s, recv_buf, <span class="hljs-built_in">sizeof</span>(recv_buf)<span class="hljs-number">-1</span>);<br>            <span class="hljs-built_in">strcat</span>(mid_buf,recv_buf);<br>        &#125; <span class="hljs-keyword">while</span>(r &gt; <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">//json解析</span><br>        <span class="hljs-built_in">cjson_to_struct_info</span>(mid_buf);<br>        <span class="hljs-comment">//关闭socket，http是短连接</span><br>        <span class="hljs-built_in">close</span>(s);<br><br>        <span class="hljs-comment">//延时一会</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> countdown = <span class="hljs-number">10</span>; countdown &gt;= <span class="hljs-number">0</span>; countdown--) &#123;<br>            <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">1000</span> / portTICK_PERIOD_MS);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>协议</category>
      
      <category>网络协议</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
      <tag>esp32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>esp32通过wifi进行http请求获得天气信息</title>
    <link href="/2024/03/19/esp32http/"/>
    <url>/2024/03/19/esp32http/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://zybp.github.io/2024/03/20/http/">http协议解释</a> <em>最后修改自2024&#x2F;3&#x2F;20</em></p></blockquote><h2 id="本次使用的开发板为和宙esp32c3，使用的IDE为vscode-espidf程序整体流程：以下为程序详解"><a href="#本次使用的开发板为和宙esp32c3，使用的IDE为vscode-espidf程序整体流程：以下为程序详解" class="headerlink" title="本次使用的开发板为和宙esp32c3，使用的IDE为vscode+espidf程序整体流程：以下为程序详解"></a><em>本次使用的开发板为和宙esp32c3，使用的IDE为vscode+espidf</em><br><strong>程序整体流程：</strong><br><img src="/../log/esp32_http/1.png" alt="流程图" title="流程图"><br>以下为程序详解</h2><h2 id="WiFi连接"><a href="#WiFi连接" class="headerlink" title="WiFi连接"></a>WiFi连接</h2><p>首先使能nvs，将等下使用的WiFi账号及密码储存到nvs上</p><blockquote><p>NVS介绍：<a href="https://docs.espressif.com/projects/esp-idf/zh_CN/v4.3.2/esp32c3/api-reference/storage/nvs_flash.html">官方介绍</a>比较繁杂。通俗来说，NVS 就是在flash 上分配的一块内存空间 ，<em>提供给用户保存电不丢失的数据</em> 。</p></blockquote><p>进入主题，我们需要将esp32连接WiFi，此时使用为<strong>WIFI STATION</strong>模式，下面给出官方步骤<br><img src="/../log/esp32_http/2.png" alt="官方流程" title="官方流程"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_netif_init</span>());                      <span class="hljs-comment">//01-1 创建LWIP核心任务</span><br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_event_loop_create_default</span>());       <span class="hljs-comment">//01-2 创建系统事件任务</span><br><span class="hljs-built_in">esp_netif_create_default_wifi_sta</span>();                    <span class="hljs-comment">//01-3 创建station实例</span><br><span class="hljs-type">wifi_init_config_t</span> cfg = <span class="hljs-built_in">WIFI_INIT_CONFIG_DEFAULT</span>();<br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_wifi_init</span>(&amp;cfg));                   <span class="hljs-comment">//01-4 创建wifi驱动程序任务，并初始化wifi驱动程序</span><br>                                                        <span class="hljs-comment">//01-5 注册，用于处理wifi连接的过程中的事件</span><br><span class="hljs-type">esp_event_handler_instance_t</span> instance_any_id;           <span class="hljs-comment">//用于处理wifi连接时候的事件的句柄</span><br><span class="hljs-type">esp_event_handler_instance_t</span> instance_got_ip;           <span class="hljs-comment">//用于处理ip分配时候产生的事件的句柄</span><br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_event_handler_instance_register</span>(WIFI_EVENT,   <span class="hljs-comment">//该句柄对wifi连接所有事件都产生响应，连接到event_handler回调函数</span><br>    ESP_EVENT_ANY_ID,<br>    &amp;event_handler,<br>    <span class="hljs-literal">NULL</span>,<br>    &amp;instance_any_id));<br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_event_handler_instance_register</span>(IP_EVENT,   <span class="hljs-comment">//该句柄仅仅处理IP_EVENT事件组中的获取ip地址事件，连接到event_handler回调函数</span><br>    IP_EVENT_STA_GOT_IP, <br>    &amp;event_handler,<br>    <span class="hljs-literal">NULL</span>,<br>    &amp;instance_got_ip));<br><br><span class="hljs-number">02</span> WIFI配置阶段<br><span class="hljs-comment">//02-1 定义wifi配置参数</span><br><span class="hljs-type">wifi_config_t</span> wifi_config;                                          <span class="hljs-comment">//定义wifi配置参数结构体</span><br><span class="hljs-built_in">memset</span>(&amp;wifi_config, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(wifi_config));                       <span class="hljs-comment">//对结构体进行初始化，把参数全部定义为0</span><br><span class="hljs-built_in">sprintf</span>((<span class="hljs-type">char</span>*)wifi_config.sta.ssid, EXAMPLE_ESP_WIFI_SSID);        <span class="hljs-comment">//配置wifi名称              </span><br><span class="hljs-built_in">sprintf</span>((<span class="hljs-type">char</span>*)wifi_config.sta.password, EXAMPLE_ESP_WIFI_PASS);    <span class="hljs-comment">//配置wifi密码</span><br>wifi_config.sta.threshold.authmode = WIFI_AUTH_WPA2_PSK;            <span class="hljs-comment">//配置加密协议</span><br>wifi_config.sta.pmf_cfg.capable = <span class="hljs-literal">true</span>;                             <br>wifi_config.sta.pmf_cfg.required = <span class="hljs-literal">false</span>;<br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_wifi_set_mode</span>(WIFI_MODE_STA));                  <span class="hljs-comment">//02-2 配置wifi工作模式</span><br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_wifi_set_config</span>(WIFI_IF_STA, &amp;wifi_config));    <span class="hljs-comment">//02-3 写入配置</span><br><br><span class="hljs-comment">//03 wifi启动阶段</span><br><span class="hljs-comment">//03-1 启动wifi驱动程序</span><br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_wifi_start</span>());   <span class="hljs-comment">//会触发回调函数</span><br><span class="hljs-built_in">ESP_LOGI</span>(TAG, <span class="hljs-string">&quot;wifi_init_sta finished.&quot;</span>);<br><br><span class="hljs-comment">//04 等待wifi连接并输出wifi连接结果   </span><br>EventBits_t bits = <span class="hljs-built_in">xEventGroupWaitBits</span>(s_wifi_event_group,<br>    WIFI_CONNECTED_BIT | WIFI_FAIL_BIT,<br>    pdFALSE,<br>    pdFALSE,<br>    portMAX_DELAY);<br><br>    <span class="hljs-keyword">if</span> (bits &amp; WIFI_CONNECTED_BIT) &#123;<br>        <span class="hljs-built_in">ESP_LOGI</span>(TAG, <span class="hljs-string">&quot;connected to ap SSID:%s password:%s&quot;</span>,<br>            EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bits &amp; WIFI_FAIL_BIT) &#123;<br>        <span class="hljs-built_in">ESP_LOGI</span>(TAG, <span class="hljs-string">&quot;Failed to connect to SSID:%s, password:%s&quot;</span>,<br>            EXAMPLE_ESP_WIFI_SSID, EXAMPLE_ESP_WIFI_PASS);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;UNEXPECTED EVENT&quot;</span>);<br>    &#125;<br><br><span class="hljs-comment">//05  事件解绑定</span><br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_event_handler_instance_unregister</span>(IP_EVENT, IP_EVENT_STA_GOT_IP, instance_got_ip));<br><span class="hljs-built_in">ESP_ERROR_CHECK</span>(<span class="hljs-built_in">esp_event_handler_instance_unregister</span>(WIFI_EVENT, ESP_EVENT_ANY_ID, instance_any_id));<br><span class="hljs-built_in">vEventGroupDelete</span>(s_wifi_event_group);<br><br></code></pre></td></tr></table></figure><p><strong>下面是WiFi回调函数</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">event_handler</span><span class="hljs-params">(<span class="hljs-type">void</span>* arg, <span class="hljs-type">esp_event_base_t</span> event_base,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">int32_t</span> event_id, <span class="hljs-type">void</span>* event_data)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_START) &#123;   <span class="hljs-comment">//如果是wifi连接事件，就进行wifi连接</span><br>        <span class="hljs-built_in">esp_wifi_connect</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event_base == WIFI_EVENT &amp;&amp; event_id == WIFI_EVENT_STA_DISCONNECTED) &#123;  <span class="hljs-comment">//如果是wifi连接失败事件</span><br>        <span class="hljs-keyword">if</span> (s_retry_num &lt; EXAMPLE_ESP_MAXIMUM_RETRY) &#123;   <span class="hljs-comment">//如果没有达到最高尝试次数，继续尝试</span><br>            <span class="hljs-built_in">esp_wifi_connect</span>();<br>            s_retry_num++;<br>            <span class="hljs-built_in">ESP_LOGI</span>(TAG, <span class="hljs-string">&quot;retry to connect to the AP&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">xEventGroupSetBits</span>(s_wifi_event_group, WIFI_FAIL_BIT);   <span class="hljs-comment">//如果达到了最高尝试次数，就停止尝试，并且标记连接失败</span><br>        &#125;<br>        <span class="hljs-built_in">ESP_LOGI</span>(TAG, <span class="hljs-string">&quot;connect to the AP fail&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event_base == IP_EVENT &amp;&amp; event_id == IP_EVENT_STA_GOT_IP) &#123;     <span class="hljs-comment">//如果是ip获取事件，获取到了ip就打印出来</span><br>        <span class="hljs-type">ip_event_got_ip_t</span>* event = (<span class="hljs-type">ip_event_got_ip_t</span>*)event_data;<br>        <span class="hljs-built_in">ESP_LOGI</span>(TAG, <span class="hljs-string">&quot;got ip:&quot;</span> IPSTR, <span class="hljs-built_in">IP2STR</span>(&amp;event-&gt;ip_info.ip));<br>        s_retry_num = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">xEventGroupSetBits</span>(s_wifi_event_group, WIFI_CONNECTED_BIT);    <span class="hljs-comment">//如果成功获取到了ip，就标记这次wifi连接成功</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="连接服务器并发送请求解析返回数据"><a href="#连接服务器并发送请求解析返回数据" class="headerlink" title="连接服务器并发送请求解析返回数据"></a>连接服务器并发送请求解析返回数据</h2><blockquote><p><strong>使用了esp_http_client库</strong><a href="https://docs.espressif.com/projects/esp-idf/zh_CN/latest/esp32/api-reference/protocols/esp_http_client.html">官方介绍</a></p></blockquote><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">http_test_task</span><span class="hljs-params">(<span class="hljs-type">void</span> *pvParameters)</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//02-1 定义需要的变量</span><br>    <span class="hljs-type">char</span> output_buffer[MAX_HTTP_OUTPUT_BUFFER] = &#123;<span class="hljs-number">0</span>&#125;;   <span class="hljs-comment">//用于接收通过http协议返回的数据</span><br>    <span class="hljs-type">int</span> content_length = <span class="hljs-number">0</span>;  <span class="hljs-comment">//http协议头的长度</span><br><br>    <span class="hljs-comment">//02-2 配置http结构体</span><br>   <br>   <span class="hljs-comment">//定义http配置结构体，并且进行清零</span><br>    <span class="hljs-type">esp_http_client_config_t</span> config ;<br>    <span class="hljs-built_in">memset</span>(&amp;config,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(config));<br><br>    <span class="hljs-comment">//向配置结构体内部写入url</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">char</span> *URL = <span class="hljs-string">&quot;http://api.seniverse.com/v3/weather/now.json?key=SCoom38PWDOGScGYt&amp;location=zhengzhou&amp;language=zh-Hans&amp;unit=c&quot;</span>;<br>    config.url = URL;<br><br>    <span class="hljs-comment">//初始化结构体</span><br>    <span class="hljs-type">esp_http_client_handle_t</span> client = <span class="hljs-built_in">esp_http_client_init</span>(&amp;config);<span class="hljs-comment">//初始化http连接</span><br><br>    <span class="hljs-comment">//设置发送请求 </span><br>    <span class="hljs-built_in">esp_http_client_set_method</span>(client, HTTP_METHOD_GET);<br><br>    <span class="hljs-comment">//02-3 循环通讯</span><br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>    &#123;<br><br>    <span class="hljs-comment">// 与目标主机创建连接，并且声明写入内容长度为0</span><br>    <span class="hljs-type">esp_err_t</span> err = <span class="hljs-built_in">esp_http_client_open</span>(client, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">//如果连接失败</span><br>    <span class="hljs-keyword">if</span> (err != ESP_OK) &#123;<br>        <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Failed to open HTTP connection: %s&quot;</span>, <span class="hljs-built_in">esp_err_to_name</span>(err));<br>    &#125; <br>    <span class="hljs-comment">//如果连接成功</span><br>    <span class="hljs-keyword">else</span> &#123;<br><br>        <span class="hljs-comment">//读取目标主机的返回内容的协议头</span><br>        content_length = <span class="hljs-built_in">esp_http_client_fetch_headers</span>(client);<br><br>        <span class="hljs-comment">//如果协议头长度小于0，说明没有成功读取到</span><br>        <span class="hljs-keyword">if</span> (content_length &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;HTTP client fetch headers failed&quot;</span>);<br>        &#125; <br><br>        <span class="hljs-comment">//如果成功读取到了协议头</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//读取目标主机通过http的响应内容</span><br>            <span class="hljs-type">int</span> data_read = <span class="hljs-built_in">esp_http_client_read_response</span>(client, output_buffer, MAX_HTTP_OUTPUT_BUFFER);<br>            <span class="hljs-keyword">if</span> (data_read &gt;= <span class="hljs-number">0</span>)<br>            &#123;<br>            <span class="hljs-comment">//打印响应内容，包括响应状态，响应体长度及其内容</span><br>            <span class="hljs-built_in">ESP_LOGI</span>(TAG, <span class="hljs-string">&quot;HTTP GET Status = %d, content_length = %lld&quot;</span>,<br>            <span class="hljs-built_in">esp_http_client_get_status_code</span>(client),<span class="hljs-comment">//获取响应状态信息</span><br>            <span class="hljs-built_in">esp_http_client_get_content_length</span>(client));<span class="hljs-comment">//获取响应信息长度</span><br>            <span class="hljs-comment">// printf(&quot;data:%s\n&quot;, output_buffer);</span><br>            <span class="hljs-comment">//对接收到的数据作相应的处理</span><br>            cJSON* root = <span class="hljs-literal">NULL</span>;<br>            root = <span class="hljs-built_in">cJSON_Parse</span>(output_buffer);<br>            <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Error parsing JSON data!&quot;</span>);<br>            <br>            &#125;<br><br>            cJSON *results = <span class="hljs-built_in">cJSON_GetObjectItem</span>(root, <span class="hljs-string">&quot;results&quot;</span>);<br>            <span class="hljs-keyword">if</span> (results == <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Failed to get &#x27;results&#x27; object!&quot;</span>);<br>                <span class="hljs-built_in">cJSON_Delete</span>(root);<br>            <br>            &#125;<br><br>            cJSON *location = <span class="hljs-built_in">cJSON_GetObjectItem</span>(results-&gt;child, <span class="hljs-string">&quot;location&quot;</span>);<br>            <span class="hljs-keyword">if</span> (location == <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Failed to get &#x27;location&#x27; object!&quot;</span>);<br>                <span class="hljs-built_in">cJSON_Delete</span>(root);<br>                <br>            &#125;<br><br>            cJSON *now = <span class="hljs-built_in">cJSON_GetObjectItem</span>(results-&gt;child, <span class="hljs-string">&quot;now&quot;</span>);<br>            <span class="hljs-keyword">if</span> (now == <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Failed to get &#x27;now&#x27; object!&quot;</span>);<br>                <span class="hljs-built_in">cJSON_Delete</span>(root);<br>            <br>            &#125;<br><br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name = <span class="hljs-built_in">cJSON_GetObjectItem</span>(location, <span class="hljs-string">&quot;name&quot;</span>)-&gt;valuestring;<br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *text = <span class="hljs-built_in">cJSON_GetObjectItem</span>(now, <span class="hljs-string">&quot;text&quot;</span>)-&gt;valuestring;<br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *temperature = <span class="hljs-built_in">cJSON_GetObjectItem</span>(now, <span class="hljs-string">&quot;temperature&quot;</span>)-&gt;valuestring;<br><br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Location: %s&quot;</span>, name);<br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Weather: %s&quot;</span>, text);<br>            <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Temperature: %s&quot;</span>, temperature);<br>            &#125; <br>            <span class="hljs-comment">//如果不成功</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">ESP_LOGE</span>(TAG, <span class="hljs-string">&quot;Failed to read response&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//关闭连接</span><br>    <span class="hljs-built_in">esp_http_client_close</span>(client);<br><br>    <span class="hljs-comment">//延时，因为心知天气免费版本每分钟只能获取20次数据</span><br>    <span class="hljs-built_in">vTaskDelay</span>(<span class="hljs-number">3000</span>/portTICK_PERIOD_MS);<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>简单记录下，物联网刚刚入门各种协议还不明白暂时说不清楚。<br>关于http协议的，补充完知识后详细记录</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>esp32开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物联网</tag>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>待阅目录</title>
    <link href="/2024/03/19/%E5%BE%85%E9%98%85%E7%9B%AE%E5%BD%95/"/>
    <url>/2024/03/19/%E5%BE%85%E9%98%85%E7%9B%AE%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="2024年待阅（正阅）书籍-（会更新）"><a href="#2024年待阅（正阅）书籍-（会更新）" class="headerlink" title="2024年待阅（正阅）书籍 （会更新）"></a>2024年待阅（正阅）书籍 <em>（会更新）</em></h1><p>-深入理解计算机系统<br>-计算机网络 <strong>（略读）</strong><br>-现代操作系统<br>-考研单词词汇 <strong>（重点）</strong></p><blockquote><p><strong>做到每周汇总</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>内功学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CS:APP学习目录（持续更新）</title>
    <link href="/2024/03/19/text1/"/>
    <url>/2024/03/19/text1/</url>
    
    <content type="html"><![CDATA[<p><strong>待更新</strong>  <em>（预计下次更新为3月24）</em></p>]]></content>
    
    
    <categories>
      
      <category>内功学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
